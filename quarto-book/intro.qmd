# Introduction

## Goal


This book introduces the basics of probability theory and statistics
using simulation-based inference.  We build up from simple simulations
to solving inverse problems in scientific models with measurement
models.  

After reading this book, we hope
the reader you are able to formulate statistical models for scientific theories
and perform inference computationally conditioned on observed data.

## Approach

Our approach is incremental and step-by-step, like an introduction to
programming.  Although statistical inference is formulated in terms of
combinatorics and calculus, we will solve inference problems using
computer simulation rather than mathematical analysis. 

## Background

### Programming

Before beginning this book, the reader should have some experience
with with computer programming basics including data structures
(scalars, vectors and matrices, arrays, dictionaries), expressions
(indexing and operators) and statements, functions, and control flow
(loops, conditionals, function application).  The reader should also
have some experience with the computer programming language *Python*.

For a primer or refresher on programming and Python basics, we
recommend [*A Whirlwind Tour of
Python*](https://github.com/jakevdp/WhirlwindTourOfPython) (Jake
VanderPlas, 2016, O'Reilly).

### Mathematics

We will not shy away from using calculus notation to express problems,
so we expect readers to be familiar with the basic concepts of limits,
summations, derivatives, and integrals.  On the other hand, we do not
expect readers to be fluent enough in applying these concepts to pass
a college-level final exam and will remind readers what all the
calculus is about and how it connects to simulation. 


## Computational tools

The modern practice of applied statistics is fundamentally
computational, because inference cannot be performed analytically for
any but the simplest of statistical models.  In this section, we lay
out the tools we will use in this book.  

### Stan

We code statistical models in *Stan* and use its built-in inference
algorithms for simulation.  We do not assume prior familiarity with
Stan.  For documentation, source code, and information about the
project, start with the [Stan web site](https://mc-stan.org).


### Python

For data manipulation, interfacing with statistical software, and
plotting, we use Python 3.


#### CmdStanPy

We use *cmdstanpy* to provide a Python interface to Stan.  For
installation instructions, we suggest starting with the [CmdStanPy web
site](https://mc-stan.org/cmdstanpy/).


#### SciPy & NumPy

We use the Python packages *NumPy* and *SciPy* for matrices and
special functions.  We will try to introduce data structures,
functions, and programming patterns as we go.  For more depth in these
packages, we suggest the [*Python Data Science
Handbook*](https://jakevdp.github.io/PythonDataScienceHandbook/) (Jake
VanderPlas, 2016, O'Reilly).


#### pandas & plotnine

We use the Python packages *pandas* for managing tabular data; see the
[pandas home page](https://pandas.pydata.org) for more information.
We use *plotnine* for plotting; see the [plotnine home
page](https://plotnine.readthedocs.io/en/stable/) for more
information.

### Alternative open-source tools

Instead of Python, we could have used Julia or R. Instead of Python,
we could have used PyMC, Pyro, NIMBLE, or Turing.jl.



