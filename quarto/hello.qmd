---
title: "*Probabilistic Programming with Stan*"
author: "Bob Carpenter"
date: "2022-07-19"
format:
  html:
    code-fold: true
jupyter: python3
---

## Introduction

#### Goal

Our goal with this book is to teach you the basics of probability
theory, statistics, and simulation-based inference.  After reading
this book, we hope you can formulate your own statistical models and
perform any necessary inference computationally.

#### Approach

Our approach is incremental and step-by-step, like an introduction to
programming.  Most of the problems in which we are interested turn out
to be formulated using combinatorics or calculus.  Although we will
not shy away from formalizing the problems we wish to solve with
mathematics, we will solve them using computational simulation rather
than mathematical analysis.  We forego the conventional introductions
using examples that admit analytic solutions and jump straight into
simulation. More concretely, we expect readers to know what limits,
derivatives, and integrals are, but we do not expect readers to be
fluent enough with these concepts to provide analytic solutions.

#### Computational tools

**Python:** For data manipulation and interfacing to Stan, we use
`Python`.  We will explain what we do as we go along, but we assume
the reader starts with a passing acquaintance with Python.

**Stan:** We will code our statistical models in Stan and use its
built-in inference algorithms for simulation.  We do not assume that
the reader has any prior familiarity with Stan.  For more information
on Stan, including examples and complete documentation, see

* [Stan home](https://mc-stan.org).

**CmdStanPy:** To provide an interface to Stan from Python, we use the
`cmdstanpy` interface.  We do not assume the reader has any experience
with CmdStanPy.  For more information about CmdStanPy, including complete installation instructions an documentation, see:

* [CmdStanPy home](https://mc-stan.org/cmdstanpy/).

# 1. &nbsp; Random Variables

Stan is a probabilistic programming language is the sense that its
variables are random rather than determinstic.  Each time Stan is run,
these variables can take on different values.

## Hello, World!

For example, consider the Stan equivalent of the conventional Hello
World program.

##### `flip.stan`
```stan
generated quantities {
  int<lower=0, upper=1> y = bernoulli_rng(0.5);
}
```

This simple Stan program involves a single declare/define statement
inside of a `generated quantities` block.  In Stan, the generated
quantities block is used to generate random quantities based on the
state of other program variables.  Here, we have a one-liner that both
declares and defines a variable.

The program `flip.stan` *declares* the variable `y` to be an integer
by declaring it with the type `int`.  The program further declares
*constraints* on `y` that require it to fall between the specified
lower bound (`0`) and upper bound (`1`) inclusively.  In other words,
this says the value of `y` must be 0 or 1.

The program `flip.stan` *defines* the variable `y` to take on the
value of executing the expression `bernoulli_rng(0.5)`.  This is done
using the conventional equality sign (`=`), just like Python.

As usual in
programming languages, Stan uses the equality sign (`=`) for
assignment.  Here, the variable `y` is assigned to the value
determined by executing the *expression* `bernoulli_rng(0.5)`.  In
general, expressions involve *numeric literals* like `0.5`, variables,
and functions like `bernoulli_rng`.  The function `bernoulli_rng`
returns either 1 or 0, with the probability of returning a 1 given by
its argument `0.5`.  This is saying there's a 50% chance of returning
1 and a 50% chance of returning 0.

We use Python to run the code and show the result of the simulated
coin flip.


```{python}
from cmdstanpy import CmdStanModel
import logging
cmdstanpy_logger = logging.getLogger("cmdstanpy")
cmdstanpy_logger.disabled = True

model = CmdStanModel(stan_file = "flip.stan")
# sys.stderr = os.devnull
fit = model.sample(show_progress=False, show_console = False)
df = fit.draws_pd()
y = df['y']
print("Hello, your flip is", "heads." if int(y[0]) else "tails.")
```

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a really cool polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```