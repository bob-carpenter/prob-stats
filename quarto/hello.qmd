---
title: "*Probabilistic Programming with Stan*"
author: "Bob Carpenter"
date: "2022-07-19"
format:
  html:
    code-fold: true
jupyter: python3
---

## Introduction

Our goal with this book is to teach you the basics of probability
theory, statistics, and simulation-based inference.  After reading
this book, we hope you can formulate your own statistical models and
perform relevant inference computationally.

Our approach is to go step-by-step like an introduction to
programming.  Although we will not shy away from mathematical
formulations of problems, we will use computer simulation rather than
combinatorics and calculus to solve them.

To make the book concrete, we have chosen several computational tools.
We will code most of our statistical models in `Stan` and use its
built-in inference algorithms for simulation.  For data manipulation
and plotting, we use Python with the `cmdstanpy` interface to Stan.


For more information about Stan and getting started instructions, as
well as complete documtatin and examples, see

* [Stan home page](https://mc-stan.org)
* [CmdStanPy home page](https://mc-stan.org/cmdstanpy/)

# 1. &nbsp; Random Variables

The reason Stan is called a probabilistic programming language is that
its variables are random rather than determinstic.  Each time Stan
is run, these variables can take on different values.  For example,
consider the Stan equivalent of the classic Hello World program, which
is saved in file `flip.stan`.

```stan
generated quantities {
  int<lower=0, upper=1> y = bernoulli_rng(0.5);
}
```

This program assigns the random variable y to the value of random
Bernoulli trial with a 0.5 probability of being 1 and a 0.5
probability of being 0.

We use Python to run the code and show the result of the simulated
coin flip.


```{python}
import os, sys


from cmdstanpy import CmdStanModel
model = CmdStanModel(stan_file = "flip.stan")
# sys.stderr = os.devnull
fit = model.sample(show_progress=False, show_console = False)
df = fit.draws_pd()
y = df['y']

print("========================================")
print("Hello, your flip is ", y[0])
```

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a really cool polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```